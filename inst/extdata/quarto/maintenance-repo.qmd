---
title: "Repo Maintenance"
execute:
  echo: false
format: 
  html:
    fig-width: 8
    fig-height: 4
    code-fold: false
---

This page identifies maintenance priorities for individual repositories.


```{r load-pkg, echo = FALSE, message = FALSE}
library (orgmetrics)
```

```{r load-data}
data_metrics <- readRDS ("results-metrics.Rds")
data_metrics$value [which (is.na (data_metrics$value))] <- 0
```

```{r ojs-in-metrics}
ojs_define (metrics_in = data_metrics)
```
```{ojs}
metrics = {
    return transpose(metrics_in).map(row => ({
        ...row,
    }));
}
metrics_len = metrics.length
```

```{ojs get-all-repos}
// Get array of unique repo names for input selector:
reposAll = metrics.map(function(item) {
    return item.package;
});
repos = Array.from(new Set(reposAll));
viewof repo = Inputs.select(repos, {multiple: false, label: "Repository:"})
```

```{ojs}
metrics_repo = metrics.filter(function(mod) {
    return mod.package.includes(repo)
})
metrics_repo_len = metrics_repo.length
```

```{ojs plot-filtered-repo}
Plot.plot({
    height: 40 * metrics_repo_len,
    marginLeft: 60,
    marginRight: 160,
    marginTop: 50,
    marginBottom: 50,
    axis: null,
    x: {
        axis: "top",
        grid: true,
        label: "Community Health"
    },
    y: { grid: true },
    marks: [
        Plot.barX(metrics_repo, {
            y: "name",
            x: "value",
            sort: {y: "-x" },
            fill: "value",
        }),
        Plot.barX(metrics_repo,
            Plot.pointer(
            {
                y: "name",
                x: "value",
                sort: {y: "-x" },
                stroke: "gray",
                fill: "value",
                strokeWidth: 2,
            })
        ),
        Plot.text(metrics_repo, {
            x: (d) => d.value < 0 ? 0 : d.value,
            y: "name",
            text: "name",
            textAnchor: "start",
            fontSize: 16,
            dx: 5
        })
    ],
    color: {
        scheme: "Cool",
        type: "ordinal"
    }
})
```
