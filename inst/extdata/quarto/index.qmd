---
title: "Organization-level Metrics and Models"
execute:
  echo: false
format: 
  html:
    theme: yeti
---

```{r message = FALSE}
library (bslib)
library (bsicons)
library (htmltools)
library (plotly)

value1 <- 99
value2 <- 33
value3 <- 1234
```

```{r}
# https://github.com/rstudio/bslib/issues/834
# "Navsets not rendering correctly with quarto"
bs_theme_dependencies(bs_theme(
    version = 5,
    preset = "yeti",
)) |>
    lapply(function(x) {
        if (x$name == "bootstrap") {
            x$name <- "bootstrap-from-bslib"
        }
        x
    }) |>
    htmltools::tagList()
```


```{r sparkline-plot, echo = FALSE}
set.seed(4242)
random_sparkline_plot <- function() {
    timeseries <- cumsum(runif(100, -2, 2))
    x_axis <- seq_along(timeseries)
    x_lim <- c(1, length(timeseries))
    y_lim <- range(timeseries) + c(-2, 0)

    par(mar = c(0, 0, 0, 0))
    # Set up the plot area
    plot(
        timeseries,
        type = "n",
        axes = FALSE,
        frame.plot = FALSE,
        ylim = y_lim,
        xlim = x_lim,
        ylab = "",
        xlab = "",
        yaxs = "i",
        xaxs = "i"
    )

    # Add the sparkline line
    lines(timeseries, type = "l", pch = NA, col = "#0B538E", lwd = 3)

    # Create polygon coordinates for shading
    polygon_x <- c(1, x_axis, length(timeseries))
    polygon_y <- c(min(y_lim), timeseries, min(y_lim))

    # Add shading under the line
    polygon(polygon_x, polygon_y, col = "#e6f2fd", border = NA)
}
sparkline_plot <- function() {
    as_fill_item(
        htmltools::plotTag(
            random_sparkline_plot(),
            width = 500,
            height = 125,
            suppressSize = "xy",
            alt = paste(
                "A sparkline plot with a randomly-generated timeseries.",
                "The timeseries starts high and ends low, with lots of variation."
            )
        )
    )
}
```

:::{.grid}

::::{.g-col-12 .g-col-md-4}

```{r echo = FALSE, message = TRUE}
bslib::value_box(
    title = "First value is",
    htmltools::p("With a sparkline plot", bsicons::bs_icon("graph-up-arrow")),
    value = value1,
    showcase = sparkline_plot(),
    showcase_layout = "bottom",
    class = "border"
)
```

::::

::::{.g-col-12 .g-col-md-4}

```{r echo = FALSE, message = TRUE}
value_box(
  title = "KPI Title",
  h1(HTML("$1 <i>Billion</i> Dollars")),
  span(
    bsicons::bs_icon("arrow-up"),
    " 30% VS PREVIOUS 30 DAYS"
  ),
  showcase = bsicons::bs_icon("piggy-bank"),
  theme = "bg-gradient-red-yellow"
)
```

::::

::::{.g-col-12 .g-col-md-4}

```{r echo = FALSE, message = TRUE}
bslib::value_box(
    title = "There are",
    value = paste0 (format (value3, big.mark = ","), " values"),
    showcase = bsicons::bs_icon("award"),
    theme = "bg-gradient-teal-orange",
    htmltools::p("That's really good", bsicons::bs_icon("emoji-smile")),
    htmltools::p("A second line", bsicons::bs_icon("boombox"))
)
```

::::

:::

---

## Cards

```{r message = FALSE}
plotly_widget <- plot_ly(x = diamonds$cut) |>
    config(displayModeBar = FALSE) |>
    layout(margin = list(t = 0, b = 0, l = 0, r = 0))
linedat <- data.frame (x = 1:10, y = runif (10))
line_widget <- plot_ly(linedat, x = ~x, y = ~y) |>
    add_lines () |>
    config(displayModeBar = FALSE) |>
    layout(margin = list(t = 0, b = 0, l = 0, r = 0))
```

:::::{.grid}

::::{.g-col-12 .g-col-md-6}

```{r message = FALSE}
bslib::card(
    height = 375,
    full_screen = TRUE,
    card_header("A filling plot"),
    card_body(
        min_height = 200,
        plotly_widget
    ),
    card_body(
        class = "card-text",
        lorem::ipsum(paragraphs = 10, sentences = 5)
    )
)
```

::::

::::{.g-col-12 .g-col-md-6}

```{r message = FALSE}
navset_card_tab(
    height = 450,
    full_screen = TRUE,
    title = "HTML Widgets",
    nav_panel(
        title = "Bar Plot",
        card_title("This is a bar plot"),
        plotly_widget
    ),
    nav_panel(
        title = "Line Plot",
        card_title("This is a line plot"),
        line_widget
    ),
    nav_panel(
        bsicons::bs_icon("info-circle"),
        lorem::ipsum(paragraphs = 10, sentences = 5)
    )
)
```

::::

:::::

---

This dashboard presents metrics and models for each repository within both the
[`epiverse-trace`](https://github.com/epiverse-trace) and
[`reconhub`](https://github.com/reconhub) GitHub organizations. It is intended
to demonstrate the kinds of analyses and insights that are possible. It is
intended to change and develop a lot. Please provide feedback via GitHub by
clicking on the symbol on the top right.

The dashboard currently has three main pages:

1. An [organization maintenance](./chaoss-org.html) page identifying
   maintenance priorities across all repositories.
2. A [repository maintenance](./chaoss-repo.html) page providing additional
   detail on maintenance needs of a selected repository.
3. A [*Community Health*](./models.html) summarising scores for the various
   [CHAOSS (*Community Health Analytics in Open Source Software*)
    models and
    metrics](https://chaoss.community/kb-metrics-and-metrics-models/) for each
    repository.

There is also an additional [network diagram page](./network.html), showing
strengths of relationship between each repository.

