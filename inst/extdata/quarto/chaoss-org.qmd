---
title: "Maintenance: Org"
execute:
  echo: false
format: 
  html:
    page-layout: full
    theme:
      - yeti
      - custom.scss
    css: styles.css
---

```{r message = FALSE}
library (bslib)
library (bsicons)
library (htmltools)
library (plotly)

value1 <- 99
value2 <- 33
value3 <- 1234
```

```{r}
# https://github.com/rstudio/bslib/issues/834
# "Navsets not rendering correctly with quarto"
bs_theme_dependencies(bs_theme(preset = "bootstrap")) |>
    lapply(function(x) {
        if (x$name == "bootstrap") {
            x$name <- "bootstrap-from-bslib"
        }
        x
    }) |>
    htmltools::tagList()
```


## Value boxes

```{r sparkline-plot, echo = FALSE}
set.seed(4242)
random_sparkline_plot <- function() {
    timeseries <- cumsum(runif(100, -2, 2))
    x_axis <- seq_along(timeseries)
    x_lim <- c(1, length(timeseries))
    y_lim <- range(timeseries) + c(-2, 0)

    par(mar = c(0, 0, 0, 0))
    # Set up the plot area
    plot(
        timeseries,
        type = "n",
        axes = FALSE,
        frame.plot = FALSE,
        ylim = y_lim,
        xlim = x_lim,
        ylab = "",
        xlab = "",
        yaxs = "i",
        xaxs = "i"
    )

    # Add the sparkline line
    lines(timeseries, type = "l", pch = NA, col = "#0B538E", lwd = 3)

    # Create polygon coordinates for shading
    polygon_x <- c(1, x_axis, length(timeseries))
    polygon_y <- c(min(y_lim), timeseries, min(y_lim))

    # Add shading under the line
    polygon(polygon_x, polygon_y, col = "#e6f2fd", border = NA)
}
sparkline_plot <- function() {
    as_fill_item(
        htmltools::plotTag(
            random_sparkline_plot(),
            width = 500,
            height = 125,
            suppressSize = "xy",
            alt = paste(
                "A sparkline plot with a randomly-generated timeseries.",
                "The timeseries starts high and ends low, with lots of variation."
            )
        )
    )
}
```

:::{.grid}

::::{.g-col-12 .g-col-md-4}

```{r echo = FALSE, message = TRUE}
bslib::value_box(
    title = "First value is",
    htmltools::p("With a sparkline plot", bsicons::bs_icon("graph-up-arrow")),
    value = value1,
    showcase = sparkline_plot(),
    showcase_layout = "bottom",
    class = "border"
)
```

::::

::::{.g-col-12 .g-col-md-4}

```{r echo = FALSE, message = TRUE}
value_box(
  title = "KPI Title",
  h1(HTML("$1 <i>Billion</i> Dollars")),
  span(
    bsicons::bs_icon("arrow-up"),
    " 30% VS PREVIOUS 30 DAYS"
  ),
  showcase = bsicons::bs_icon("piggy-bank"),
  theme = "bg-gradient-red-yellow"
)
```

::::

::::{.g-col-12 .g-col-md-4}

```{r echo = FALSE, message = TRUE}
bslib::value_box(
    title = "There are",
    value = paste0 (format (value3, big.mark = ","), " values"),
    showcase = bsicons::bs_icon("award"),
    theme = "bg-gradient-teal-orange",
    htmltools::p("That's really good", bsicons::bs_icon("emoji-smile")),
    htmltools::p("A second line", bsicons::bs_icon("boombox"))
)
```

::::

:::

---

## Cards

```{r message = FALSE}
plotly_widget <- plot_ly(x = diamonds$cut) |>
    config(displayModeBar = FALSE) |>
    layout(margin = list(t = 0, b = 0, l = 0, r = 0))
linedat <- data.frame (x = 1:10, y = runif (10))
line_widget <- plot_ly(linedat, x = ~x, y = ~y) |>
    add_lines () |>
    config(displayModeBar = FALSE) |>
    layout(margin = list(t = 0, b = 0, l = 0, r = 0))
```

:::::{.grid}

::::{.g-col-12 .g-col-md-6}

```{r message = FALSE}
bslib::card(
    height = 375,
    full_screen = TRUE,
    card_header("A filling plot"),
    card_body(
        min_height = 200,
        plotly_widget
    ),
    card_body(
        class = "card-text",
        lorem::ipsum(paragraphs = 10, sentences = 5)
    )
)
```

::::

::::{.g-col-12 .g-col-md-6}

```{r message = FALSE}
navset_card_tab(
    height = 450,
    full_screen = TRUE,
    title = "HTML Widgets",
    nav_panel(
        title = "Bar Plot",
        card_title("This is a bar plot"),
        plotly_widget
    ),
    nav_panel(
        title = "Line Plot",
        card_title("This is a line plot"),
        line_widget
    ),
    nav_panel(
        bsicons::bs_icon("info-circle"),
        lorem::ipsum(paragraphs = 10, sentences = 5)
    )
)
```

::::

:::::

---

<div class="text-paragraph">

This page details maintenance needs for each repository within the `reconhub`
and `epiverse-trace` organizations. The initial section presents [CHAOSS
(*Community Health Analytics in Open Source Software*) models and
metrics](https://chaoss.community/kb-metrics-and-metrics-models/) for each
repository. The metrics are direct repository-level measures of a variety of
aspects indicative of open-source community or repository health. The models
represent higher level conceptual aggregations of metrics, designed by the
CHAOSS community to represent important and more abstracted aspects of
community health.

The single graph here converts the models into a single measure of "maintainer
deficit", which is a ratio of community engagement to developer responsiveness.
The [*Community Health* page](./models.html) provides full detail of individual
models and metrics.

Following that graph are several more distinct indicators of maintenance need,
all of which are assessed over the previous year of repository activity:

- The proportion of new issues openend that were bug reports
- The proportion of issues with labels
- The average time for a core maintainer to respond to a new issue
- A couple of metrics of "contributor absence" for each repository, indicating
maintenance deficit arising through absence of primary contributors.

All graphs on this page are displayed such that darker, more purple colours are
worse than lighter, more green colours. Graphs are also generally displayed
with repositories with greater maintenance need plotted near the top, and those
with less maintenance need near the bottom (or not included at all).

## CHAOSS metrics and models

This page uses CHAOSS metrics and models to identify maintenance deficits
across all repositories within the `reconhub` and `epiverse-trace`
organizations. These deficits are higher for projects with more community
engagement yet less developer responsiveness or activity. Repositories with
higher maintenance deficits are presented first, with maintenance deficit
decreasing down the page. Lengths of bars indicate community engagement minus
developer responsiveness, so that:

- More positive bars are higher up the page, and have high engagement yet lower
developer responsiveness.
- More negative bars are lower down the page, and have high developer activity
yet low community engagement.

Bars are coloured to provide insight into the relative contributions of
community engagement versus developer responsiveness. Because organizations
generally have more direct control over the latter than the former, bars are
coloured by developer responsiveness. This means that:

- Bars with colours tending towards bright green have greater developer
responsiveness.
- Bars tending toward darker purple have lower developer responsiveness.

Maintenance priorities should likely be focussed on repositories with high
values of maintenance deficit yet lower levels of developer responsiveness.
These repositories will be higher up in the graph (more positive values), yet
with more dark purple colours.

</div>


```{r load-pkg, echo = FALSE, message = FALSE}
library (orgmetrics)
```

```{r load-data}
data_maintenance <- readRDS ("results-maintenance-org.Rds")

data_ctb_abs <- readRDS ("results-data-ctb-absence.Rds")
data_ctb_change <- dplyr::filter (data_ctb_abs, what == "change") |>
    dplyr::group_by (repo) |>
    dplyr::summarise (measure = max (measure))
# That is then not actually used any further, as data are secondary to main
# measures of contributor absence.
data_ctb_abs <- dplyr::filter (data_ctb_abs, what == "absence")
data_ctb_abs_repo <- dplyr::group_by (data_ctb_abs, repo) |>
    dplyr::summarise (measure = max (measure), name = head (name, 1L)) |>
    dplyr::filter (measure >= 0.5)
data_ctb_abs_ctb <- dplyr::group_by (data_ctb_abs, name) |>
    dplyr::summarise (measure = mean (measure), n = dplyr::n ())

data_issue_resp <- readRDS ("results-data-issue-resp.Rds")
data_issue_bugs <- readRDS ("results-data-issue-bugs.Rds")
```

```{r ojs-in-models}
ojs_define (models_in = data_maintenance)
ojs_define (ctb_change_in = data_ctb_change)
ojs_define (ctb_abs_repo_in = data_ctb_abs_repo)
ojs_define (ctb_abs_ctb_in = data_ctb_abs_ctb)
ojs_define (issue_resp_in = data_issue_resp)
ojs_define (issue_bugs_in = data_issue_bugs)
```

```{ojs plot-latest}
Plot = import("https://esm.sh/@observablehq/plot")
```

```{ojs}
models = {
    return transpose(models_in).map(row => ({
        ...row,
    }));
}
models_len = models.length;

ctb_change = {
    return transpose(ctb_change_in).map(row => ({
        ...row,
    }));
}
ctb_change_len = ctb_change.length;
ctb_abs_repo = {
    return transpose(ctb_abs_repo_in).map(row => ({
        ...row,
    }));
}
ctb_abs_repo_len = ctb_abs_repo.length;
ctb_abs_ctb = {
    return transpose(ctb_abs_ctb_in).map(row => ({
        ...row,
    }));
}
ctb_abs_ctb_len = ctb_abs_ctb.length;

issue_resp = {
    return transpose(issue_resp_in).map(row => ({
        ...row,
    }));
}
issue_resp_len = issue_resp.length;
issue_bugs = {
    return transpose(issue_bugs_in).map(row => ({
        ...row,
    }));
}
```


```{ojs plot-all-community-health-vars}
Plot.plot({
    height: 20 * models_len,
    marginLeft: 60,
    marginRight: 160,
    marginTop: 50,
    marginBottom: 50,
    axis: null,
    x: {
        axis: "top",
        grid: true,
        label: "Maintenance Deficit"
    },
    y: { grid: true },
    marks: [
        Plot.barX(models, {
            y: "package",
            x: "maintenance",
            sort: {y: "-x" },
            fill: "dev_resp",
        }),
        Plot.barX(models,
            Plot.pointer(
            {
                y: "package",
                x: "maintenance",
                sort: {y: "-x" },
                stroke: "gray",
                fill: "maintenance",
                strokeWidth: 2,
            })
        ),
        Plot.text(models, {
            x: (d) => d.maintenance < 0 ? 0 : d.maintenance,
            y: "package",
            text: "package",
            textAnchor: "start",
            fontSize: 16,
            dx: 5
        })
    ],
    color: {
        scheme: "Cool",
        type: "ordinal"
    }
})
```

-----

## Proportion of bugs

This plot shows the proportion of all recent issues that are bug reports. Values
are only shown for repositories for which > 25% of all issues are bugs.

```{ojs}
issue_bugs_filt = issue_bugs.filter(function(i) {
    return i.bugs >= 0.25
});
bugs_len = issue_bugs_filt.length;
issue_labs_filt = issue_bugs.filter(function(i) {
    return i.labels <= 0.5
});
labs_len = issue_labs_filt.length;
```

```{ojs plot-all-issue-bugs}
Plot.plot({
    height: 20 * bugs_len,
    marginLeft: 60,
    marginRight: 160,
    marginTop: 50,
    marginBottom: 50,
    axis: null,
    x: {
        axis: "top",
        grid: true,
        label: "Proportion Bugs"
    },
    y: { grid: true },
    marks: [
        Plot.barX(issue_bugs_filt, {
            y: "repo",
            x: "bugs",
            sort: {y: "-x" },
            fill: "bugs",
        }),
        Plot.barX(issue_bugs_filt,
            Plot.pointer(
            {
                y: "repo",
                x: "bugs",
                sort: {y: "-x" },
                stroke: "gray",
                fill: "bugs",
                strokeWidth: 2,
            })
        ),
        Plot.text(issue_bugs_filt, {
            x: "bugs",
            y: "repo",
            text: "repo",
            textAnchor: "start",
            fontSize: 16,
            dx: 5
        })
    ],
    color: {
        scheme: "Cool",
        type: "ordinal",
        reverse: true
    }
})
```

## Issue labelling

And this shows the proportion of all issues that are labelled. Values are only
shown for repositories with poor issue labelling (< 50%).


```{ojs plot-all-issue-labels}
Plot.plot({
    height: 20 * labs_len,
    marginLeft: 60,
    marginRight: 160,
    marginTop: 50,
    marginBottom: 50,
    axis: null,
    x: {
        axis: "top",
        grid: true,
        label: "Proportion Labelled"
    },
    y: { grid: true },
    marks: [
        Plot.barX(issue_labs_filt, {
            y: "repo",
            x: "labels",
            sort: {y: "x" },
            fill: "labels",
        }),
        Plot.barX(issue_labs_filt,
            Plot.pointer(
            {
                y: "repo",
                x: "labels",
                sort: {y: "x" },
                stroke: "gray",
                fill: "labels",
                strokeWidth: 2,
            })
        ),
        Plot.text(issue_labs_filt, {
            x: "labels",
            y: "repo",
            text: "repo",
            textAnchor: "start",
            fontSize: 16,
            dx: 5
        })
    ],
    color: {
        scheme: "Cool",
        type: "ordinal"
    }
})
```

## Issue response time

This graph shows average response times (in days) to issues reported by people
other than main repository maintainers.

```{ojs plot-all-issue-resp-time}
Plot.plot({
    height: 20 * issue_resp_len,
    marginLeft: 60,
    marginRight: 160,
    marginTop: 50,
    marginBottom: 50,
    axis: null,
    x: {
        axis: "top",
        grid: true,
        label: "Issue response time (days)"
    },
    y: { grid: true },
    marks: [
        Plot.barX(issue_resp, {
            y: "repo",
            x: "response",
            sort: {y: "-x" },
            fill: "response",
        }),
        Plot.barX(issue_resp,
            Plot.pointer(
            {
                y: "repo",
                x: "response",
                sort: {y: "-x" },
                stroke: "gray",
                fill: "response",
                strokeWidth: 2,
            })
        ),
        Plot.text(issue_resp, {
            x: "response",
            y: "repo",
            text: "repo",
            textAnchor: "start",
            fontSize: 16,
            dx: 5
        })
    ],
    color: {
        scheme: "Cool",
        type: "ordinal",
        reverse: true
    }
})
```

## Contributor Absence

The next two graphs show a metric of main contributor absence. Values are only
shown for which main contributors have not recently contributed. The metric is
the proportion of overall commits made by now absent contributors.

### Absence for repositories

```{ojs plot-all-ctb-abs-repo}
Plot.plot({
    height: 20 * ctb_abs_repo_len,
    marginLeft: 60,
    marginRight: 160,
    marginTop: 50,
    marginBottom: 50,
    axis: null,
    x: {
        axis: "top",
        grid: true,
        label: "Proportion of overall commits"
    },
    y: { grid: true },
    marks: [
        Plot.barX(ctb_abs_repo, {
            y: "repo",
            x: "measure",
            sort: {y: "-x" },
            fill: "measure",
        }),
        Plot.barX(ctb_abs_repo,
            Plot.pointer(
            {
                y: "repo",
                x: "measure",
                sort: {y: "-x" },
                stroke: "gray",
                fill: "measure",
                strokeWidth: 2,
            })
        ),
        Plot.text(ctb_abs_repo, {
            x: "measure",
            y: "repo",
            text: "repo",
            textAnchor: "start",
            fontSize: 16,
            dx: 5
        })
    ],
    color: {
        scheme: "Cool",
        type: "ordinal",
        reverse: true
    }
})
```

### Absence for Contributors

Values are shown here for contributors who have been recently absent from
repositories. Values are the maximal proportion of historical commits across
all repositories from which they have been absent, with bars coloured by
numbers of repositories, so darker, more purple colours indicate greater number
of absent repositories.

```{ojs plot-all-ctb-abs-ctb}
fullScaleValues = ctb_abs_ctb.map(d => d.n);
minVal = Math.min(...fullScaleValues);
maxVal = Math.max(...fullScaleValues);
Plot.plot({
    height: 20 * ctb_abs_ctb_len,
    marginLeft: 60,
    marginRight: 160,
    marginTop: 50,
    marginBottom: 50,
    axis: null,
    x: {
        axis: "top",
        grid: true,
        label: "Proportion of overall commits"
    },
    y: { grid: true },
    marks: [
        Plot.barX(ctb_abs_ctb, {
            y: "name",
            x: "measure",
            sort: {y: "-x" },
            fill: "n",
        }),
        Plot.barX(ctb_abs_ctb,
            Plot.pointer(
            {
                y: "name",
                x: "measure",
                sort: {y: "-x" },
                stroke: "gray",
                fill: "measure",
                strokeWidth: 2,
            })
        ),
        Plot.text(ctb_abs_ctb, {
            x: "measure",
            y: "name",
            text: "name",
            textAnchor: "start",
            fontSize: 16,
            dx: 5
        })
    ],
    color: {
        scheme: "Cool",
        type: "linear",
        domain: [minVal, maxVal],
        reverse: true
    }
})
```
