---
title: "EpiVerse Organizational Overview"
execute:
  echo: false
format:
  html:
    theme: yeti
---

```{r libraries, message = FALSE}
library (bslib)
library (bsicons)
library (htmltools)
library (plotly)
```

```{r valuebox-values}
repo_data <- readRDS ("results-data-repo-src.Rds")
annual_commits <- readRDS ("results-annual-commits.Rds")
annual_gh_activity <- readRDS ("results-annual-gh-activity.Rds")
annual_gh_activity$total <- rowSums (annual_gh_activity [, -1])
num_repos <- nrow (repo_data)
repo_orgs <- gsub ("\\/.*$", "", repo_data$orgrepo) |>
    table () |>
    sort (decreasing = TRUE) |>
    head (n = 2L)
value1 <- 99
value2 <- 33
```

```{r sparkline-plot-commits, echo = FALSE}
sparkline_plot_commits_in <- function (annual_commits) {
    x <- as.integer (annual_commits$year)
    y <- annual_commits$num_commits
    x_lim <- range (x)
    y_lim <- c (0, max (y) * 1.05)

    par (mar = c (3, 0, 0, 0), bg = "#20c997")
    plot (
        x,
        y,
        type = "n",
        axes = FALSE,
        frame.plot = FALSE,
        ylim = y_lim,
        xlim = x_lim,
        ylab = "",
        xlab = "",
        yaxs = "i",
        xaxs = "i",
    )

    lines (x, y, type = "l", pch = NA, col = "#0B538E", lwd = 3)

    polygon_x <- c (x [1], x, x [length (x)])
    polygon_y <- c (0, y, 0)

    polygon (polygon_x, polygon_y, col = "#e6f2fd", border = NA)
}
sparkline_plot_commits <- function () {
    as_fill_item (
        htmltools::plotTag (
            sparkline_plot_commits_in (annual_commits),
            suppressSize = "xy",
            alt = "sparkline plot of annual numbers of commits."
        )
    )
}
```

```{r sparkline-plot-gh, echo = FALSE}
sparkline_plot_gh_in <- function (annual_gh) {
    x <- as.integer (annual_gh$year)
    y <- annual_gh$total
    x_lim <- range (x)
    y_lim <- c (0, max (y) * 1.05)

    par (mar = c (3, 0, 0, 0), bg = "#20c997")
    plot (
        x,
        y,
        type = "n",
        axes = FALSE,
        frame.plot = FALSE,
        ylim = y_lim,
        xlim = x_lim,
        ylab = "",
        xlab = "",
        yaxs = "i",
        xaxs = "i",
    )

    lines (x, y, type = "l", pch = NA, col = "#0B538E", lwd = 3)

    polygon_x <- c (x [1], x, x [length (x)])
    polygon_y <- c (0, y, 0)

    polygon (polygon_x, polygon_y, col = "#e6f2fd", border = NA)
}
sparkline_plot_gh <- function () {
    as_fill_item (
        htmltools::plotTag (
            sparkline_plot_gh_in (annual_gh_activity),
            suppressSize = "xy",
            alt = "sparkline plot of annual GitHub activity."
        )
    )
}
```

```{r echo = FALSE, message = TRUE}
lines <- paste0 (unname (repo_orgs), " from ", names (repo_orgs))
bslib::page_fillable (
    bslib::layout_columns (
        bslib::value_box (
            title = "There are",
            value = paste0 (format (num_repos, big.mark = ","), " repositories"),
            showcase = bsicons::bs_icon ("clipboard-data"),
            showcase_layout = "top right",
            theme = "bg-gradient-blue-orange",
            htmltools::p ("including"),
            htmltools::p (bsicons::bs_icon ("1-square"), lines [1]),
            htmltools::p (bsicons::bs_icon ("2-square"), lines [2])
        ),
        bslib::value_box (
            title = "Total commits:",
            value = format (sum (annual_commits$num_commits), big.mark = ","),
            htmltools::p (
                "between ",
                min (as.integer (annual_commits$year)),
                " and ",
                max (as.integer (annual_commits$year))
            ),
            htmltools::p ("(Plot below shows time series)"),
            showcase = sparkline_plot_commits (),
            showcase_layout = "bottom",
            theme = "bg-teal"
        ),
        value_box (
            title = "GitHub Activity",
            value = format (sum (annual_gh_activity$total), big.mark = ","),
            htmltools::p (
                "Total issues, comments, and pull requests"
            ),
            showcase = sparkline_plot_gh (),
            showcase_layout = "bottom",
            theme = "bg-teal"
        ),
        col_widths = c (4, 4, 4)
    )
)
```

```{r}
# This code identifies packages with high community engagement yet low
# developer responsiveness. It identifies packages lying in the lower-right
# corner of the quadrant frormed by the regerssion and its perpendicular
# through the mid-point of the entire plane, and lying below the 90% CI.
ci_level <- 0.9
m <- readRDS ("results-maintenance-org.Rds") |>
    dplyr::rename (x = comm_engage, y = dev_resp)
x_mid <- min (m$x) + diff (range (m$x)) / 2
y_mid <- min (m$y) + diff (range (m$y)) / 2

mod <- lm (y ~ x, data = m)
slope <- coefficients (mod) [2]
intercept <- coefficients (mod) [1]
perp_slope <- -1 / slope
perp_intercept <- y_mid - perp_slope * x_mid

ci <- predict (mod, interval = "confidence", level = ci_level) |>
    as.data.frame ()
data <- cbind (m, ci) |>
    dplyr::mutate (
        below_ci = y < lwr,
        pos_reg = y - (slope * x + intercept),
        pos_perp = y - (perp_slope * x + perp_intercept),
        index_lr_quad = pos_reg < 0 & pos_perp > 0,
        target_points = index_lr_quad & below_ci
    ) |>
    dplyr::filter (target_points) |>
    dplyr::select (package, x, y) |>
    dplyr::rename (comm_engage = x, dev_resp = y)

npkgs_requiring_maintenance <- nrow (data)

# library (ggplot2)
# ggplot (m, aes (x = x, y = y)) +
#     geom_point (cex = 2, col = "yellow") +
#     geom_smooth (method = "lm", formula = "y ~ x", se = TRUE) +
#     geom_abline (slope = perp_slope, intercept = perp_intercept, col = "blue", lty = 2) +
#     geom_point (data = data, col = "red", cex = 2) +
#     ggplot2::theme_minimal ()
```


```{r}
# Code to get outlier metrics for packages identified as having maintenance
# priorities:
threshold <- 0.8
threshold <- 0.5 + threshold / 2
num_sds <- qnorm (threshold, 0, 1)
limits <- readRDS ("results-metrics.Rds") |>
    dplyr::group_by (name) |>
    dplyr::filter (!is.na (value)) |>
    dplyr::summarise (
        lower = mean (value) - num_sds * sd (value),
        upper = mean (value) + num_sds * sd (value)
    )
m <- readRDS ("results-metrics.Rds") |>
    dplyr::left_join (limits, by = "name") |>
    dplyr::group_by (name) |>
    dplyr::filter (!is.na (value)) |>
    dplyr::mutate (below = value < lower) |>
    dplyr::select (-lower, -upper) |>
    dplyr::filter (below) |>
    dplyr::arrange (name)

# Update metrics names to descriptions:
desc <- data.frame (
    name = limits$name,
    desc = limits$name
)
desc$desc [desc$name == "dependency_count"] <- "Potentially excessive dependencies:"
desc$desc [desc$name == "has_ci"] <- "Lacking continuous integration:"
desc$desc [desc$name == "issues_to_prs"] <- "High ratio of issues-to-PRs:"
desc$desc [desc$name == "maintainer_count"] <- "Low number of maintainers:"
desc$desc [desc$name == "test_coverage"] <- "Low test coverage:"
m$name <- desc$desc [match (m$name, desc$name)]

metrics <- unique (m$name)
metrics_data <- lapply (metrics, function (i) {
    list (
        h = i,
        text = m$package [which (m$name == i)]
    )
})
```



```{r}
bslib::page_fillable (
    bslib::layout_columns (
        bslib::value_box (
            full_screen = FALSE,
            title = "Urgent maintance required on",
            value = paste0 (npkgs_requiring_maintenance, " packages"),
            # showcase = bsicons::bs_icon ("heart-pulse"),
            showcase = bsicons::bs_icon ("tools"),
            showcase_layout = "bottom",
            htmltools::div (
                htmltools::p (paste0 (
                    "with high community engagement, ",
                    "yet low developer responsiveness:"
                )),
                htmltools::br (),
                if (nrow (data) == 1L) {
                    tags$p (paste0 ("- ", data$package))
                } else {
                    htmltools::tagList (lapply (data$package, function (txt) {
                        tags$p (bsicons::bs_icon ("caret-right"), txt)
                    }))
                }
            ),
            theme = "bg-gradient-red-yellow"
        ),
        bslib::card (
            full_screen = TRUE,
            bslib::card_header ("Maintenance priorities:"),
            bslib::card_body (
                lapply (metrics_data, function (i) {
                    htmltools::div (
                        htmltools::h3 (i$h),
                        if (length (i$text) == 1L) {
                            tags$p (i$text)
                        } else {
                            htmltools::tagList (lapply (i$text, function (txt) {
                                tags$p (bsicons::bs_icon ("caret-right"), txt)
                            }))
                        },
                        style = "padding-bottom: 1rem; padding-top: 0px; border-bottom: 1px solid #eee;"
                    )
                })
            )
        ),
        col_widths = c (4, 8)
    )
)
```



-----

## Cards

```{r message = FALSE}
plotly_widget <- plot_ly (x = diamonds$cut) |>
    config (displayModeBar = FALSE) |>
    layout (margin = list (t = 0, b = 0, l = 0, r = 0))
linedat <- data.frame (x = 1:10, y = runif (10))
line_widget <- plot_ly (linedat, x = ~x, y = ~y) |>
    add_lines () |>
    config (displayModeBar = FALSE) |>
    layout (margin = list (t = 0, b = 0, l = 0, r = 0))
```

:::::{.grid}

::::{.g-col-12 .g-col-md-6}

```{r message = FALSE}
bslib::card (
    height = 375,
    full_screen = TRUE,
    card_header ("A filling plot"),
    card_body (
        min_height = 200,
        plotly_widget
    ),
    card_body (
        class = "card-text",
        lorem::ipsum (paragraphs = 10, sentences = 5)
    )
)
```

::::

::::{.g-col-12 .g-col-md-6}

```{r}
bar_data <- data.frame (
    category = letters [1:5],
    value = round (runif (5, max = 100))
)
line_data <- data.frame (x = 1:10, y = runif (10))
```

```{r ojs-define}
ojs_define (barDataIn = bar_data)
ojs_define (lineDataIn = line_data)
```

```{ojs}
barData = {
    return transpose(barDataIn).map(row => ({
        ...row,
    }));
}
lineData = {
    return transpose(lineDataIn).map(row => ({
        ...row,
    }));
}
```

::: {.panel-tabset}

## Bar Plot

```{ojs}
Plot.plot({
    height: 375,
    marginLeft: 60,
    marginRight: 20,
    marginTop: 50,
    marginBottom: 10,
    axis: null,
    x: { grid: true, },
    y: { grid: true, },
    marks: [
        Plot.axisY({
            label: null,
            fontSize: 18,
            axis: "left"
        }),
        Plot.barY(barData, {
            y: "value",
            x: "category",
            sort: {y: "-x" },
            fill: "value",
        }),
        Plot.text(barData, {
            y: "value",
            x: "category",
            text: "category",
            fontSize: 24,
            dy: -15
        })
    ],
    color: {
        scheme: "Cool",
        type: "ordinal",
        reverse: false
    }
})
```

## Line Plot {.active}

```{ojs}
Plot.plot({
    height: 375,
    marginLeft: 60,
    marginRight: 20,
    marginTop: 50,
    marginBottom: 50,
    title: "This is a title",
    subtitle: "And this is a sub-title",
    x: { grid: true },
    y: { grid: true },
    marks: [
        Plot.axisX({
            axis: "bottom",
            label: null,
            fontSize: 18
        }),
        Plot.axisY({
            axis: "left",
            label: null,
            fontSize: 18
        }),
        Plot.lineY(lineData, {
            x: "x",
            y: "y",
            stroke: "orange",
            strokeWidth:  5,
        }),
        Plot.text([[1, 0]], {
                text: ["And here is some 'Plot.text' additional stuff"],
                lineWidth: 30,
                textAnchor: "start",
                fontSize: 14,
                dy: 40
        }),
    ],
})
```

:::

::::

:::::

-----

This dashboard presents metrics and models for each repository within both the
[`epiverse-trace`](https://github.com/epiverse-trace) and
[`reconhub`](https://github.com/reconhub) GitHub organizations. It is intended
to demonstrate the kinds of analyses and insights that are possible. It is
intended to change and develop a lot. Please provide feedback via GitHub by
clicking on the symbol on the top right.

The dashboard currently has three main pages:

1. An [organization maintenance](./chaoss-org.html) page identifying
   maintenance priorities across all repositories.
2. A [repository maintenance](./chaoss-repo.html) page providing additional
   detail on maintenance needs of a selected repository.
3. A [*Community Health*](./models.html) summarising scores for the various
   [CHAOSS (*Community Health Analytics in Open Source Software*)
    models and
    metrics](https://chaoss.community/kb-metrics-and-metrics-models/) for each
    repository.

There is also an additional [network diagram page](./network.html), showing
strengths of relationship between each repository.

:::{.grid}

:::{.g-col-12 .g-col-md-6}
<div class="card" style="background-color:powderblue; text-align:center;"><h1>First Card</h1></div>
:::

:::{.g-col-12 .g-col-md-6}
<div class="card"><h1>Second Card</h1></div>
:::

:::
