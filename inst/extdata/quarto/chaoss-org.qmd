---
title: "Maintenance: Org"
execute:
  echo: false
format: 
  html:
    theme:
      - yeti
---

This page provides an organization-level overview of all repositories in both
the [`reconhub`](https://github.com/reconhub) and
[`epiverse-trace`](https://github.com/epiverse-trace) GitHub organizations.
Statistics here are assessed for each repository, and aggregated across the
organizations into four distinct categories:

1. _Development_: Metrics of both code development and maintainer continuity
   and diversity. High scores reflect repositories with high levels of code
   development from a diverse community of maintainers.
2. _Issues_: Metrics derived from GitHub issues and pull requests. High scores
   reflect repositories with active use of issues, pull requests, code reviews,
   and rapid responses from core maintainers to issues or pull requests opened
   by wider community members.
3. _Popularity_: Metrics of repository popularity, derived from CRAN download
   numbers (where applicable), GitHub stars and forks, and issue comments from
   user communities beyond core maintainers.
4. _Dependencies and Releases_: High scores reflect repositories with fewer
   dependencies and frequent releases.

The _Overall_ column is an average of all metrics across all of these four
categorical groupings, and provides an overall metric of repository health.

---

<!---
******** START UTILITY FUNCTIONS ********
--->


```{ojs}
function sparkbar(max) {
  const colourScale = d3.scaleSequential(d3.interpolateCool)
    .domain([0, max]);

  return (x) => htl.html`<div style="
    background: ${colourScale(x)};
    color: black;
    width: ${100 * x / max}%;
    float: right;
    padding-right: 3px;
    box-sizing: border-box;
    overflow: visible;
    display: flex;
    justify-content: end;">${x.toLocaleString("en-US")}`
}

function tooltip(title, expl) {
    const th = document.createElement("th");
    th.title = expl
    th.style.background = "#f0f8ff";
    th.textContent = title;

    th.addEventListener("mouseover", () => th.style.background = "#d0e8ff");
    th.addEventListener("mouseout", () => th.style.background = "#f0f8ff");

    return th;
}

function pkgfmt(pkg) {
    const th = document.createElement("th");
    th.title = "hover"
    th.style.background = "#f0f8ff";
    th.textContent = pkg;

    th.addEventListener("mouseover", () => th.style.background = "#d0e8ff");
    th.addEventListener("mouseout", () => th.style.background = "#f0f8ff");

    th.addEventListener("click", () => {
        localStorage.setItem("orgmetricsRepo", pkg);
        th.style.background = "#a0f8ff";
        window.location.href = "/chaoss-repo.html";
    });

    return th;
}
```

<!---
******** END UTILITY FUNCTIONS ********
--->

## Recent development

This chart shows the recent development of metrics aggregated into each of the
four groups.

<!---
******** START PLOT OF AVERAGE METRICS OVER DATES ********
--->

```{r}
data_metrics <- readRDS ("results-metrics.Rds")

# Grouped metrics over dates
metrics_dates <- lapply (data_metrics, function (m) {
    m |>
        tidyr::pivot_wider (names_from = name, values_from = value) |>
        orgmetrics:::data_metrics_group () |>
        dplyr::select (-dplyr::any_of ("none")) |>
        dplyr::relocate (total, .after = package) |>
        dplyr::arrange (by = desc (total)) |>
        dplyr::summarise (dplyr::across (dplyr::where (is.numeric), mean))
})
metrics_dates <- do.call (rbind, metrics_dates)
# dplyr::add_rownames is now tibble::rownames_to_column(), but no tibble here
metrics_dates <- cbind (date = rownames (metrics_dates), metrics_dates)
rownames (metrics_dates) <- NULL
metrics_dates <- metrics_dates |>
    tidyr::pivot_longer (-date) |>
    dplyr::mutate (date = as.Date (date))

ojs_define (metrics_dates_in = metrics_dates)
```


```{ojs}
metricsData = {
    return transpose(metrics_dates_in).map(row => ({
        ...row,
        date: new Date(row.date)
    }));
}
```

```{ojs}
Plot.plot({
    title: "Grouped metrics",
    subtitle: "Time series of each group plus average across all groups ('total')",
    color: {
        legend: true,
        label: "name",
        swatchHeight: 4,
    },
    marks: [
        Plot.lineY(metricsData, {
            x: "date",
            y: "value",
            stroke: "name",
            strokeWidth:  2,
            strokeDasharray: "2,5",
        }),
        Plot.linearRegressionY(metricsData, {
            x: "date",
            y: "value",
            stroke: "name",
            strokeWidth: 2,
            ci: 0
        }),
        Plot.axisY({
            label: null,
        }),
    ],
    x: {
        grid: true,
        type: "utc",
        domain: [d3.min(metricsData, d => d.date), d3.max(metricsData, d => d.date)],
        tickFormat: "%Y", 
        ticks: [...new Set(metricsData.map(d => d.date.getFullYear()))].map(year => new Date(`${year}-01-01`)),
    },
    y: { grid: true },
    style: {
        fontSize: '16px',
    }
})
```

<!---
******** END PLOT OF AVERAGE METRICS OVER DATES ********
--->


<!---
******** START REPO-LEVEL METRICS TABLE ********
--->

## Grouped metrics for each repository

This table shows the metrics for each repository aggregated into each of the
four groups.

```{r}
data_metrics <- readRDS ("results-metrics.Rds")

# Main table of most recent metrics:
# which.max does not work for dates, but max does
index1 <- which (names (data_metrics) == max (names (data_metrics)))
m <- data_metrics [[index1]] |>
    tidyr::pivot_wider (names_from = name, values_from = value) |>
    orgmetrics:::data_metrics_group () |>
    dplyr::relocate (total, .after = package) |>
    dplyr::arrange (by = desc (total))
ojs_define (metrics_table_in = m)
```

```{ojs}
metricsGroupedTable = {
    return transpose(metrics_table_in).map(row => ({
        ...row,
    }));
}
```

```{ojs}
Inputs.table(metricsGroupedTable, {
    width: {
        package: 100,
        total: 200,
        development: 200,
        issues: 200,
        popularity: 200,
        meta: 200,
    },
    format: {
        package: d => pkgfmt(d),
        development: sparkbar(d3.max(metricsGroupedTable, d => d.development)),
        issues: sparkbar(d3.max(metricsGroupedTable, d => d.issues)),
        popularity: sparkbar(d3.max(metricsGroupedTable, d => d.popularity)),
        meta: sparkbar(d3.max(metricsGroupedTable, d => d.meta)),
        total: sparkbar(d3.max(metricsGroupedTable, d => d.total)),
    },
    header: {
        development: tooltip("Development", "Code development and maintenance metrics"),
        issues: tooltip("Issues", "GitHub issues and pull request activity"),
        popularity: tooltip("Popularity", "Project popularity on CRAN (where applicable) and GitHub"),
        meta: tooltip("Dependencies and releases", ""),
        total: tooltip("Overall", "Average across all four categories of metrics."),
    },
})
```

<!---
******** END REPO-LEVEL METRICS TABLE ********
--->
The following graph converts the models into a single measure of "maintainer
deficit", which is a ratio of community engagement to developer responsiveness.
The [*Community Health* page](./models.html) provides full detail of individual
models and metrics.

Following that graph are several more distinct indicators of maintenance need,
all of which are assessed over the previous year of repository activity:

- The proportion of new issues opened that were bug reports
- The proportion of issues with labels
- The average time for a core maintainer to respond to a new issue
- A couple of metrics of "contributor absence" for each repository, indicating
maintenance deficit arising through absence of primary contributors.

All graphs on this page are displayed such that darker, more purple colours are
worse than lighter, more green colours. Graphs are also generally displayed
with repositories with greater maintenance need plotted near the top, and those
with less maintenance need near the bottom (or not included at all).

## CHAOSS metrics and models

This page uses CHAOSS metrics and models to identify maintenance deficits
across all repositories within the `reconhub` and `epiverse-trace`
organizations. These deficits are higher for projects with more community
engagement yet less developer responsiveness or activity. Repositories with
higher maintenance deficits are presented first, with maintenance deficit
decreasing down the page. Lengths of bars indicate community engagement minus
developer responsiveness, so that:

- More positive bars are higher up the page, and have high engagement yet lower
developer responsiveness.
- More negative bars are lower down the page, and have high developer activity
yet low community engagement.

Bars are coloured to provide insight into the relative contributions of
community engagement versus developer responsiveness. Because organizations
generally have more direct control over the latter than the former, bars are
coloured by developer responsiveness. This means that:

- Bars with colours tending towards bright green have greater developer
responsiveness.
- Bars tending toward darker purple have lower developer responsiveness.

Maintenance priorities should likely be focussed on repositories with high
values of maintenance deficit yet lower levels of developer responsiveness.
These repositories will be higher up in the graph (more positive values), yet
with more dark purple colours.


```{r load-pkg, echo = FALSE, message = FALSE}
library (orgmetrics)
```

```{r load-data}
data_maintenance <- readRDS ("results-maintenance-org.Rds")

data_ctb_abs <- readRDS ("results-data-ctb-absence.Rds")
data_ctb_change <- dplyr::filter (data_ctb_abs, what == "change") |>
    dplyr::group_by (repo) |>
    dplyr::summarise (measure = max (measure))
# That is then not actually used any further, as data are secondary to main
# measures of contributor absence.
data_ctb_abs <- dplyr::filter (data_ctb_abs, what == "absence")
data_ctb_abs_repo <- dplyr::group_by (data_ctb_abs, repo) |>
    dplyr::summarise (measure = max (measure), name = head (name, 1L)) |>
    dplyr::filter (measure >= 0.5)
data_ctb_abs_ctb <- dplyr::group_by (data_ctb_abs, name) |>
    dplyr::summarise (measure = mean (measure), n = dplyr::n ())

data_issue_resp <- readRDS ("results-data-issue-resp.Rds")
data_issue_bugs <- readRDS ("results-data-issue-bugs.Rds")
```

```{r ojs-in-models}
ojs_define (models_in = data_maintenance)
ojs_define (ctb_change_in = data_ctb_change)
ojs_define (ctb_abs_repo_in = data_ctb_abs_repo)
ojs_define (ctb_abs_ctb_in = data_ctb_abs_ctb)
ojs_define (issue_resp_in = data_issue_resp)
ojs_define (issue_bugs_in = data_issue_bugs)
```

```{ojs plot-latest}
Plot = import("https://esm.sh/@observablehq/plot")
```

```{ojs}
models = {
    return transpose(models_in).map(row => ({
        ...row,
    }));
}
models_len = models.length;

ctb_change = {
    return transpose(ctb_change_in).map(row => ({
        ...row,
    }));
}
ctb_change_len = ctb_change.length;
ctb_abs_repo = {
    return transpose(ctb_abs_repo_in).map(row => ({
        ...row,
    }));
}
ctb_abs_repo_len = ctb_abs_repo.length;
ctb_abs_ctb = {
    return transpose(ctb_abs_ctb_in).map(row => ({
        ...row,
    }));
}
ctb_abs_ctb_len = ctb_abs_ctb.length;

issue_resp = {
    return transpose(issue_resp_in).map(row => ({
        ...row,
    }));
}
issue_resp_len = issue_resp.length;
issue_bugs = {
    return transpose(issue_bugs_in).map(row => ({
        ...row,
    }));
}
```


```{ojs plot-all-community-health-vars}
Plot.plot({
    height: 20 * models_len,
    marginLeft: 60,
    marginRight: 160,
    marginTop: 50,
    marginBottom: 50,
    axis: null,
    x: {
        axis: "top",
        grid: true,
        label: "Maintenance Deficit"
    },
    y: { grid: true },
    marks: [
        Plot.barX(models, {
            y: "package",
            x: "maintenance",
            sort: {y: "-x" },
            fill: "dev_resp",
        }),
        Plot.barX(models,
            Plot.pointer(
            {
                y: "package",
                x: "maintenance",
                sort: {y: "-x" },
                stroke: "gray",
                fill: "maintenance",
                strokeWidth: 2,
            })
        ),
        Plot.text(models, {
            x: (d) => d.maintenance < 0 ? 0 : d.maintenance,
            y: "package",
            text: "package",
            textAnchor: "start",
            fontSize: 16,
            dx: 5
        })
    ],
    color: {
        scheme: "Cool",
        type: "ordinal"
    }
})
```

-----

## Proportion of bugs

This plot shows the proportion of all recent issues that are bug reports. Values
are only shown for repositories for which > 25% of all issues are bugs.

```{ojs}
issue_bugs_filt = issue_bugs.filter(function(i) {
    return i.bugs >= 0.25
});
bugs_len = issue_bugs_filt.length;
issue_labs_filt = issue_bugs.filter(function(i) {
    return i.labels <= 0.5
});
labs_len = issue_labs_filt.length;
```

```{ojs plot-all-issue-bugs}
Plot.plot({
    height: 20 * bugs_len,
    marginLeft: 60,
    marginRight: 160,
    marginTop: 50,
    marginBottom: 50,
    axis: null,
    x: {
        axis: "top",
        grid: true,
        label: "Proportion Bugs"
    },
    y: { grid: true },
    marks: [
        Plot.barX(issue_bugs_filt, {
            y: "repo",
            x: "bugs",
            sort: {y: "-x" },
            fill: "bugs",
        }),
        Plot.barX(issue_bugs_filt,
            Plot.pointer(
            {
                y: "repo",
                x: "bugs",
                sort: {y: "-x" },
                stroke: "gray",
                fill: "bugs",
                strokeWidth: 2,
            })
        ),
        Plot.text(issue_bugs_filt, {
            x: "bugs",
            y: "repo",
            text: "repo",
            textAnchor: "start",
            fontSize: 16,
            dx: 5
        })
    ],
    color: {
        scheme: "Cool",
        type: "ordinal",
        reverse: true
    }
})
```

## Issue labelling

And this shows the proportion of all issues that are labelled. Values are only
shown for repositories with poor issue labelling (< 50%).


```{ojs plot-all-issue-labels}
Plot.plot({
    height: 20 * labs_len,
    marginLeft: 60,
    marginRight: 160,
    marginTop: 50,
    marginBottom: 50,
    axis: null,
    x: {
        axis: "top",
        grid: true,
        label: "Proportion Labelled"
    },
    y: { grid: true },
    marks: [
        Plot.barX(issue_labs_filt, {
            y: "repo",
            x: "labels",
            sort: {y: "x" },
            fill: "labels",
        }),
        Plot.barX(issue_labs_filt,
            Plot.pointer(
            {
                y: "repo",
                x: "labels",
                sort: {y: "x" },
                stroke: "gray",
                fill: "labels",
                strokeWidth: 2,
            })
        ),
        Plot.text(issue_labs_filt, {
            x: "labels",
            y: "repo",
            text: "repo",
            textAnchor: "start",
            fontSize: 16,
            dx: 5
        })
    ],
    color: {
        scheme: "Cool",
        type: "ordinal"
    }
})
```

## Issue response time

This graph shows average response times (in days) to issues reported by people
other than main repository maintainers.

```{ojs plot-all-issue-resp-time}
Plot.plot({
    height: 20 * issue_resp_len,
    marginLeft: 60,
    marginRight: 160,
    marginTop: 50,
    marginBottom: 50,
    axis: null,
    x: {
        axis: "top",
        grid: true,
        label: "Issue response time (days)"
    },
    y: { grid: true },
    marks: [
        Plot.barX(issue_resp, {
            y: "repo",
            x: "response",
            sort: {y: "-x" },
            fill: "response",
        }),
        Plot.barX(issue_resp,
            Plot.pointer(
            {
                y: "repo",
                x: "response",
                sort: {y: "-x" },
                stroke: "gray",
                fill: "response",
                strokeWidth: 2,
            })
        ),
        Plot.text(issue_resp, {
            x: "response",
            y: "repo",
            text: "repo",
            textAnchor: "start",
            fontSize: 16,
            dx: 5
        })
    ],
    color: {
        scheme: "Cool",
        type: "ordinal",
        reverse: true
    }
})
```

## Contributor Absence

The next two graphs show a metric of main contributor absence. Values are only
shown for which main contributors have not recently contributed. The metric is
the proportion of overall commits made by now absent contributors.

### Absence for repositories

```{ojs plot-all-ctb-abs-repo}
Plot.plot({
    height: 20 * ctb_abs_repo_len,
    marginLeft: 60,
    marginRight: 160,
    marginTop: 50,
    marginBottom: 50,
    axis: null,
    x: {
        axis: "top",
        grid: true,
        label: "Proportion of overall commits"
    },
    y: { grid: true },
    marks: [
        Plot.barX(ctb_abs_repo, {
            y: "repo",
            x: "measure",
            sort: {y: "-x" },
            fill: "measure",
        }),
        Plot.barX(ctb_abs_repo,
            Plot.pointer(
            {
                y: "repo",
                x: "measure",
                sort: {y: "-x" },
                stroke: "gray",
                fill: "measure",
                strokeWidth: 2,
            })
        ),
        Plot.text(ctb_abs_repo, {
            x: "measure",
            y: "repo",
            text: "repo",
            textAnchor: "start",
            fontSize: 16,
            dx: 5
        })
    ],
    color: {
        scheme: "Cool",
        type: "ordinal",
        reverse: true
    }
})
```

### Absence for Contributors

Values are shown here for contributors who have been recently absent from
repositories. Values are the maximal proportion of historical commits across
all repositories from which they have been absent, with bars coloured by
numbers of repositories, so darker, more purple colours indicate greater number
of absent repositories.

```{ojs plot-all-ctb-abs-ctb}
fullScaleValues = ctb_abs_ctb.map(d => d.n);
minVal = Math.min(...fullScaleValues);
maxVal = Math.max(...fullScaleValues);
Plot.plot({
    height: 20 * ctb_abs_ctb_len,
    marginLeft: 60,
    marginRight: 160,
    marginTop: 50,
    marginBottom: 50,
    axis: null,
    x: {
        axis: "top",
        grid: true,
        label: "Proportion of overall commits"
    },
    y: { grid: true },
    marks: [
        Plot.barX(ctb_abs_ctb, {
            y: "name",
            x: "measure",
            sort: {y: "-x" },
            fill: "n",
        }),
        Plot.barX(ctb_abs_ctb,
            Plot.pointer(
            {
                y: "name",
                x: "measure",
                sort: {y: "-x" },
                stroke: "gray",
                fill: "measure",
                strokeWidth: 2,
            })
        ),
        Plot.text(ctb_abs_ctb, {
            x: "measure",
            y: "name",
            text: "name",
            textAnchor: "start",
            fontSize: 16,
            dx: 5
        })
    ],
    color: {
        scheme: "Cool",
        type: "linear",
        domain: [minVal, maxVal],
        reverse: true
    }
})
```
